#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# -----------------------------------------------------------------------
# We don't support docker compose for production environments.
# If you choose to use this type of deployment make sure to
# create you own docker environment file (docker/.env) with your own
# unique random secure passwords and SECRET_KEY.
# -----------------------------------------------------------------------
x-superset-image: &superset-image apachesuperset.docker.scarf.sh/apache/superset:${TAG:-latest-dev}
x-superset-depends-on: &superset-depends-on
  - db
  - redis
x-superset-volumes:
  &superset-volumes # /app/pythonpath_docker will be appended to the PYTHONPATH in the final container
  - ./docker:/app/docker
  - ./config/superset_config_docker.py:/app/docker/pythonpath_dev/superset_config_docker.py
  - superset_home:/app/superset_home
  - ./config/logo/custom-logo.png:/app/superset/static/assets/images/custom-logo.png
  - ./config/logo/custom-favicon.png:/app/superset/static/assets/images/custom-favicon.png

services:
  traefik:
    image: traefik:v2.10
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=mark@securehst.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
    networks:
      - traefik_net

  redis:
    image: redis:7
    pull_policy: always
    container_name: superset_cache
    restart: unless-stopped
    volumes:
      - redis:/data
    networks:
      - superset-net
      - traefik_net

  db:
    env_file:
      - path: docker/.env # default
        required: true
      - path: config/.env-superset # optional override
        required: true
    image: postgres:16-alpine
    pull_policy: always
    container_name: superset_db
    restart: unless-stopped
    volumes:
      - db_home:/var/lib/postgresql/data
      - ./docker/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    networks:
      - superset-net
      - traefik_net

  superset:
    env_file:
      - path: docker/.env # default
        required: true
      - path: config/.env-superset # optional override
        required: true
    image: *superset-image
    container_name: superset_app
    command: ["/app/docker/docker-bootstrap.sh", "app-gunicorn"]
    user: "root"
    restart: unless-stopped
    ports:
      - 8088:8088
    depends_on: *superset-depends-on
    volumes: *superset-volumes
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.superset.rule=Host(`superset-vista.apphst.com`)"
      - "traefik.http.routers.superset.service=superset"
      - "traefik.http.routers.superset.entrypoints=websecure"
      - "traefik.http.routers.superset.tls.certresolver=le"
      - "traefik.http.routers.superset.tls=true"
      - "traefik.http.services.superset.loadbalancer.server.port=8088"
    networks:
      - superset-net
      - traefik_net

  superset-init:
    image: *superset-image
    pull_policy: always
    container_name: superset_init
    command: ["/app/docker/docker-init.sh"]
    env_file:
      - path: docker/.env # default
        required: true
      - path: config/.env-superset # optional override
        required: true
    depends_on: *superset-depends-on
    user: "root"
    volumes: *superset-volumes
    healthcheck:
      disable: true
    networks:
      - superset-net
      - traefik_net

  superset-worker:
    image: *superset-image
    pull_policy: always
    container_name: superset_worker
    command: ["/app/docker/docker-bootstrap.sh", "worker"]
    env_file:
      - path: docker/.env # default
        required: true
      - path: config/.env-superset # optional override
        required: true
    restart: unless-stopped
    depends_on: *superset-depends-on
    user: "root"
    volumes: *superset-volumes
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "celery -A superset.tasks.celery_app:app inspect ping -d celery@$$HOSTNAME",
        ]
    networks:
      - superset-net
      - traefik_net

  superset-worker-beat:
    image: *superset-image
    pull_policy: always
    container_name: superset_worker_beat
    command: ["/app/docker/docker-bootstrap.sh", "beat"]
    env_file:
      - path: docker/.env # default
        required: true
      - path: config/.env-superset # optional override
        required: true
    restart: unless-stopped
    depends_on: *superset-depends-on
    user: "root"
    volumes: *superset-volumes
    healthcheck:
      disable: true
    networks:
      - superset-net
      - traefik_net

volumes:
  superset_home:
    external: false
  db_home:
    external: false
  redis:
    external: false

networks:
  superset-net:
    driver: bridge
  traefik_net:
    external: true
